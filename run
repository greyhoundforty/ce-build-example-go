#!/bin/bash

function clean() {
  set +x
  echo Cleaning...
  ic cr namespace-rm $ICR_NS -f > /dev/null 2>&1 || true
  ic ce app delete -n s2i-app -f --wto=0 > /dev/null 2>&1 || true
  ic iam api-key-delete s2i-sample -f > /dev/null 2>&1 || true
  ic ce registry delete -n icr -f > /dev/null 2>&1 || true
  ic ce buildrun delete -n myrun -f > /dev/null 2>&1 || true
  ic ce build delete -n mybuild -f > /dev/null 2>&1 || true
  rm -f out || true
}

# Define our ICR Namespace env var for later use
ID=$(ic account show | grep "Account ID:" | sed "s/^.*:  *//")
ICR_NS=s2i-${ID:0:25}

# Clean up previous run
clean

set -ex

# Create an ICR namespace to hold our new image
ic cr namespace-add $ICR_NS

# Create an apikey, put it in a registry secret. Used to push/pull image to ICR
ic iam api-key-create s2i-sample | \
  grep "API Key" | sed 's/^.*Key  *//' | \
  xargs ic ce registry create -n icr -s us.icr.io -u iamapikey -p

# Define the build of this dir in this github repo
ic ce build create -n mybuild -i us.icr.io/$ICR_NS/app --rs icr \
  --source https://github.com/IBM/CodeEngine --context-dir s2i-dockerfile

# Now kick off the build itself
ic ce buildrun submit -n myrun --build mybuild

# Wait for it to finish
while true ; do
  ic ce buildrun get -n myrun > out
  grep Succeeded out && break
  grep "exited with" out && cat out && exit 1
  sleep 10
done

# Test the image we just built - deploy an app and 'curl' it
ic ce app create -n s2i-app --image us.icr.io/$ICR_NS/app --rs icr
URL=$(ic ce app get -n s2i-app -o jsonpath={.status.url})
curl -s $URL

# Clean
clean
